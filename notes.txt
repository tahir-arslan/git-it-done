6.1
var getUserRepos = function() {
    fetch("https://api.github.com/users/octocat/repos")
        .then(function(response) {
            // response object has a method called .json() to format to JSON. If the return
            // is non-JSON data, then another method should be used like .text() as a solution
            response.json()
            // this .json() returns another promise, therefore the next .then() method is required
            // it's callback function is going to capture the actual data
                .then(function(data) {
                    console.log(data);
                });
        });
    console.log("outside");
};

status codes:
    in the 200s means HTTP request was successful
    in the 400s means HTTP request received but issue with how the request was made
        ex. missing info, user/page that does not exist, etc
    in the 500s means error with server or lack of internet connection to make request

when testing for connection errors, can either disconnect internet or put in wrong URL (correct afterwards)

6.2
Fetch API is created around javascript promise

6.3
In this lesson, using GitHub api limits the amount of information sent to 30. This is different 
    for each API used (must refer to documentation for information and limitations)

HTTP headers allow client and server to pass aditional info with HTTP request or response
    ex. whether or not to cache (locally store), if so for how long
    goes into header because filesize is small and not relevant to content in the body of a request/response
    
6.4
we can pass information from one .html to another with query parameters
remember: when using relative pathing, always use relative path from where the element will be displayed
    not where the element is being coded 
        ex. in this lesson, we linked single-repo.html to index.html in homepage.js
        so when coding in the relative path, it wil be relative to where the html files are located
        (not where the js file is located)

query parameters - strings appended to end of URLS to define actions, pass information, or
    specify content to webpage/API endpoint
    the `?` at the end of a URL identifies parameters
    parameters are assigned values in a key=value format, `=` assigns value to parameter/key
    in this way, information is passed to the website as part of the URL

Location Web API (browser-based tool) is used to retrieve query parameter in this lesson
    `document.location` into console, can scroll down to "search" to find query parameter
    from here, can use .split() to manipulate the string to extract the information we need
    note: using an emtpy string ("") will split between each character
    note: .split() does not change original string

when creating app, make sure to brainstorm as many issues/errors as possible to created
    solutions for error handling

6.5
https://docs.github.com/en/rest/search#search-repositories
    for github api documentation on searching repos

when using parameters in the URL, we can use multiple parameters and seperate them using `&`
    GitHub API allows users to add additional parameters known as qualifiers by adding `+is:featured`
    case of GitHub. can also use as many parameters as needed, as long as URL < 255 chars.
        ex. https://api.github.com/search/repositories?q=javascript+html+css+is:featured&sort=stars
            in this example, `css` is the last keyword, `is:feature` is last qualifier
            
//////////////////////////////////////////////////////////////////////////////////////////////////////
issues:
